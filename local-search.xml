<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>自定义协议</title>
    <link href="/2022/03/24/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/03/24/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="自定义协议"><a href="#自定义协议" class="headerlink" title="自定义协议"></a>自定义协议</h1><h3 id="1-协议要素"><a href="#1-协议要素" class="headerlink" title="1.协议要素"></a>1.协议要素</h3><ul><li><p>魔数</p><p>第一时间判断是否是无效数据包</p></li><li><p>版本号</p><p>可以支持协议的升级</p></li><li><p>序列化算法</p><p>json hessian jdk …</p></li><li><p>指令类型</p><p>登录 注册 单聊 …</p></li><li><p>请求序列</p><p>双工通信,提供异步能力</p></li><li><p>正文长度</p></li><li><p>消息正文</p></li></ul><h3 id="2-自定义编解码器"><a href="#2-自定义编解码器" class="headerlink" title="2.自定义编解码器"></a>2.自定义编解码器</h3><h4 id="2-1实现编码器"><a href="#2-1实现编码器" class="headerlink" title="2.1实现编码器"></a>2.1实现编码器</h4><p>将Message转换成ByteBuf在Channel上传输</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageCodec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ByteToMessageCodec</span>&lt;Message&gt; &#123;<br>    <span class="hljs-comment">// 编码</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, Message msg, ByteBuf out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 魔数 4byte</span><br>        out.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;);<br><br>        <span class="hljs-comment">// 2. 版本号 1byte</span><br>        out.writeByte(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 3. 序列化算法 1byte</span><br>        <span class="hljs-comment">// 未来 0 : &#123;jdk : 0 , json : 1 &#125;</span><br>        out.writeByte(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 4. 指令类型 1byte</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * msg.getMessageType() 会返回当前类型对应的编号</span><br><span class="hljs-comment">         * LoginRequestMessage = 0</span><br><span class="hljs-comment">         * */</span><br>        out.writeByte(msg.getMessageType());<br><br>        <span class="hljs-comment">// 5.请求序号 4byte</span><br>        out.writeInt(msg.getSequenceId());<br>        <span class="hljs-comment">// 对齐填充 保证字节数为 1 &lt;&lt; 4</span><br>        out.writeByte(<span class="hljs-number">0xff</span>);<br><br>        <span class="hljs-comment">// 6.将对象转换字节数组</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>        oos.writeObject(msg);<br>        <span class="hljs-type">byte</span>[] bytes = bos.toByteArray();<br><br>        <span class="hljs-comment">// 7.内容长度</span><br>        out.writeInt(bytes.length);<br><br>        <span class="hljs-comment">// 8.写入内容</span><br>        out.writeBytes(bytes);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ppRoom聊天室</category>
      
    </categories>
    
    
    <tags>
      
      <tag>netty</tag>
      
      <tag>java</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>netty进阶粘包半包问题</title>
    <link href="/2022/03/23/netty%E8%BF%9B%E9%98%B6%E7%B2%98%E5%8C%85%E5%8D%8A%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2022/03/23/netty%E8%BF%9B%E9%98%B6%E7%B2%98%E5%8C%85%E5%8D%8A%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="netty粘包半包问题解决"><a href="#netty粘包半包问题解决" class="headerlink" title="netty粘包半包问题解决"></a>netty粘包半包问题解决</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><h3 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        start();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">serverBootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>            <span class="hljs-comment">// 调整操作系统的系统缓冲区(滑动窗口)</span><br>            serverBootstrap.option(ChannelOption.SO_RCVBUF, <span class="hljs-number">10</span>);<br>            <span class="hljs-comment">// 调整netty缓冲区 ByteBuf</span><br>            serverBootstrap.childOption(ChannelOption.RCVBUF_ALLOCATOR, <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdaptiveRecvByteBufAllocator</span>(<span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>));<br>            serverBootstrap.group(boss, worker);<br>            serverBootstrap.channel(NioServerSocketChannel.class);<br>            serverBootstrap.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel channel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    channel.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>());<br>                    System.out.println();<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> serverBootstrap.bind(<span class="hljs-number">8888</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2.客户端"></a>2.客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Client.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            send();<br>        &#125;<br>        log.debug(<span class="hljs-string">&quot;发送完成~&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.group(worker);<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(NioSocketChannel channel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    channel.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ctx.alloc().buffer(<span class="hljs-number">16</span>);<br>                            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">20</span>];<br>                            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bytes.length; i++) &#123;<br>                                bytes[i] = (<span class="hljs-type">byte</span>) i;<br>                            &#125;<br>                            buf.writeBytes(bytes);<br>                            ctx.writeAndFlush(buf);<br>                            ctx.channel().close();<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8888</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="粘包半包解决"><a href="#粘包半包解决" class="headerlink" title="粘包半包解决"></a>粘包半包解决</h2><h4 id="1-短连接"><a href="#1-短连接" class="headerlink" title="1.短连接"></a>1.短连接</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">每次建立连接只发很短的消息，多发几次<br>发一次断一次,这样就不会粘包了...<br>不能解决半包问题而且效率低下<br></code></pre></td></tr></table></figure><h4 id="2-定长解码器"><a href="#2-定长解码器" class="headerlink" title="2.定长解码器"></a>2.定长解码器</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">将消息长度固定<br>每次发送和接受的消息长度固定<br>缺点:<br><span class="hljs-code">虽然可以解决粘包半包问题,但是如果发送的消息比约定的字节数少很多的话,就会造成资源的浪费</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 接受消息的时候以10个字节为单位接受,即使发过来的消息很长 也不会全部接受</span><br>channel.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FixedLengthFrameDecoder</span>(<span class="hljs-number">10</span>));<br><br><span class="hljs-comment">// 接受结果</span><br>R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">55750</span>] READ: 10B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">01</span> <span class="hljs-number">01</span> <span class="hljs-number">01</span> <span class="hljs-number">01</span> <span class="hljs-number">01</span> <span class="hljs-number">01</span> <span class="hljs-number">01</span> <span class="hljs-number">01</span> <span class="hljs-number">01</span> <span class="hljs-number">5f</span>                   |........._      |<br>+--------+-------------------------------------------------+----------------+<br></code></pre></td></tr></table></figure><h4 id="3-行解码器"><a href="#3-行解码器" class="headerlink" title="3.行解码器"></a>3.行解码器</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">以特定符号为标记,只有接收到标记的时候才接受一次<br><br>channel.pipeline().addLast(new LineBasedFrameDecoder(20));<br><span class="hljs-code">读取到 &#x27;\n&#x27;才认为是一次完整的消息</span><br><span class="hljs-code">如果超过了最大长度还没有找到 \n 就认为是无效消息</span><br><span class="hljs-code">就会报错 =&gt;frame length (10) exceeds the allowed maximum (5)</span><br><span class="hljs-code">虽然可以解决粘包和半包问题,但是效率低下需要读取每一个字节去判断是不是标记字符</span><br></code></pre></td></tr></table></figure><h4 id="4-LTC解码器"><a href="#4-LTC解码器" class="headerlink" title="4.LTC解码器"></a>4.LTC解码器</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">消息长度 + 消息内容 =&gt; 完整的消息<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLengthFieldDecoder</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">EmbeddedChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmbeddedChannel</span>(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthFieldBasedFrameDecoder</span>(<span class="hljs-number">1024</span>, <span class="hljs-number">0</span>,<br>                        <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>());<br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT.buffer();<br>        send(buffer, <span class="hljs-string">&quot;hello, world!&quot;</span>);<br>        send(buffer, <span class="hljs-string">&quot;hi&quot;</span>);<br>        send(buffer, <span class="hljs-string">&quot;fuck you!&quot;</span>);<br>        channel.writeInbound(buffer);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(ByteBuf byteBuf, String content)</span> &#123;<br>        <span class="hljs-type">byte</span>[] bytes = content.getBytes();<br>        byteBuf.writeInt(bytes.length);<br>        byteBuf.writeBytes(content.getBytes());<br>    &#125;<br><br>&#125;<br><br><br>结果部分:<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">68</span> <span class="hljs-number">65</span> 6c 6c <span class="hljs-number">6f</span> 2c <span class="hljs-number">20</span> <span class="hljs-number">77</span> <span class="hljs-number">6f</span> <span class="hljs-number">72</span> 6c <span class="hljs-number">64</span> <span class="hljs-number">21</span>          |hello, world!   |<br>+--------+-------------------------------------------------+----------------+<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">23</span> <span class="hljs-number">20</span>:<span class="hljs-number">26</span>:<span class="hljs-number">39</span> [main] DEBUG io.netty.handler.logging.LoggingHandler - [id: 0xembedded, L:embedded - R:embedded] READ: 2B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">68</span> <span class="hljs-number">69</span>                                           |hi              |<br>+--------+-------------------------------------------------+----------------+<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">23</span> <span class="hljs-number">20</span>:<span class="hljs-number">26</span>:<span class="hljs-number">39</span> [main] DEBUG io.netty.handler.logging.LoggingHandler - [id: 0xembedded, L:embedded - R:embedded] READ: 9B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">66</span> <span class="hljs-number">75</span> <span class="hljs-number">63</span> 6b <span class="hljs-number">20</span> <span class="hljs-number">79</span> <span class="hljs-number">6f</span> <span class="hljs-number">75</span> <span class="hljs-number">21</span>                      |fuck you!       |<br>+--------+-------------------------------------------------+----------------+<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>netty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>netty</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring的初体验</title>
    <link href="/2022/03/23/spring%E7%9A%84%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2022/03/23/spring%E7%9A%84%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="第二章-Spring的初体验"><a href="#第二章-Spring的初体验" class="headerlink" title="第二章 Spring的初体验"></a>第二章 Spring的初体验</h2><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h3><ul><li><p>Spring jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Spring的配置文件</p><ol><li>配件文件位置没有要求</li><li>配置文件名称没有要求</li><li>以后需要主动告诉Spring</li></ol></li></ul><h3 id="2-Spring的核心API"><a href="#2-Spring的核心API" class="headerlink" title="2.Spring的核心API"></a>2.Spring的核心API</h3><ul><li><p>ApplicationContext</p><p>作用:创建对象，解耦合</p><ul><li><p>它是一个接口，屏蔽具体的实现细节</p><ol><li>非web环境: <code>ClassPathXmlApplicationContext</code></li><li>web环境: <code>xmlWebApplicationContext</code></li></ol></li><li><p>重量级资源</p><p>对象占用大量内存</p><p>不会频繁的创建对象: 一个应用只会创建一个对象，面临着多线程问题</p><p>ApplicationContext一定是线程安全的(多线程并发访问)</p></li></ul></li></ul><h3 id="3-程序开发"><a href="#3-程序开发" class="headerlink" title="3.程序开发"></a>3.程序开发</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.创建类型<br>2.配置文件 applicationContext<br><span class="hljs-code">&lt;bean id=&quot;person&quot; class=&quot;com.xia.basic.Person&quot;/&gt;</span><br><span class="hljs-code">3.通过工厂创建对象</span><br><span class="hljs-code">ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;/applicationContext.xml&quot;);</span><br><span class="hljs-code">    Person person = (Person) ctx.getBean(&quot;person&quot;);</span><br></code></pre></td></tr></table></figure><h3 id="4-细节分析"><a href="#4-细节分析" class="headerlink" title="4.细节分析"></a>4.细节分析</h3><ul><li><p>Spring创建的对象也叫做bean或者是component</p></li><li><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">person0</span> <span class="hljs-operator">=</span> (Person)ctx.getBean(<span class="hljs-string">&quot;person&quot;</span>);<br><span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;person&quot;</span>, Person.class);<br><span class="hljs-comment">// 使用这种方式获取对象，配置文件中只能有一个bean标签的类型是Person</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">person2</span> <span class="hljs-operator">=</span> ctx.getBean(Person.class);<br><br><span class="hljs-comment">// 获取Spring配置文件中所有bean的id值</span><br>String[] names = ctx.getBeanDefinitionNames();<br><span class="hljs-comment">// 根据类型获取Bean的id值</span><br>String[] namesForType = ctx.getBeanNamesForType(Person.class);<br><span class="hljs-comment">// 判断配置文件中是否含有id == person </span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">containsBeanDefinition</span> <span class="hljs-operator">=</span> ctx.containsBeanDefinition(<span class="hljs-string">&quot;person&quot;</span>);<br><span class="hljs-comment">// 判断配置文件中的 name == person ||id == person</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">containsBean</span> <span class="hljs-operator">=</span> ctx.containsBean(<span class="hljs-string">&quot;person&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>配置文件细节</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.只配置class属性<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.basic.Person&quot;</span> /&gt;</span></span><br><span class="hljs-code">Spring默认id值:com.xia.basic.Person#0</span><br><span class="hljs-code">若只使用一次</span><br><span class="hljs-code">但是若使用多次且会被其他bean引用那么就需要起id</span><br><span class="hljs-code">2.name属性相当于是bean的小名可以有多个，id是大名是唯一的</span><br><span class="hljs-code">&lt;bean class=&quot;com.xia.basic.Person&quot; id=&quot;person&quot; name=&quot;p,p1&quot;/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="5-整合日志框架"><a href="#5-整合日志框架" class="headerlink" title="5.整合日志框架"></a>5.整合日志框架</h3><ul><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--支持log4j--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">log4j.rootLogger</span> = <span class="hljs-string">debug,console</span><br><br><span class="hljs-attr">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-attr">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.console.layout.ConversionPattern</span> =  <span class="hljs-string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="第三章-注入"><a href="#第三章-注入" class="headerlink" title="第三章 注入"></a>第三章 注入</h2><h3 id="1-什么是注入"><a href="#1-什么是注入" class="headerlink" title="1.什么是注入"></a>1.什么是注入</h3><p>通过Spring工厂以及配置文件为对象的成员变量赋值</p><h3 id="2-为什么需要注入"><a href="#2-为什么需要注入" class="headerlink" title="2.为什么需要注入"></a>2.为什么需要注入</h3><p>为了解决代码耦合问题，如果通过配置文件去进行属性的赋值，那么就可以在不修改源代码的情况下，修改赋值的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;person&quot;</span>, Person.class);        <br>p1.setName(<span class="hljs-string">&quot;ken&quot;</span>);<br>p1.setId(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h3 id="3-注入的使用方法"><a href="#3-注入的使用方法" class="headerlink" title="3.注入的使用方法"></a>3.注入的使用方法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.basic.Person&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xiadong&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-注入的方式"><a href="#4-注入的方式" class="headerlink" title="4.注入的方式"></a>4.注入的方式</h3><h4 id="4-1set注入"><a href="#4-1set注入" class="headerlink" title="4.1set注入"></a>4.1set注入</h4><p>通过类的set方法进行依赖注入</p><ul><li><p>JDK内置的类型</p><ol><li><p>8种基本类型 + String</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>xiadong<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>数组</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;emails&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>271909886@qq.com<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>xiadaoliang@outlook.com<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Set集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tels&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>13952095131<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>15155038102<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>List集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addresses&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>天长<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>南京<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Map集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pets&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bear<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>ken<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--key 有特殊标签 value没有特殊标签--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>dog<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>tom<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Properti集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;p&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;pws&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>用户自定义类型</p><p>方式一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.basic.UserServiceImpl&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDAO&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.basic.UserDAOImpl&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式二</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.basic.UserServiceImpl&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDAO&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;userDAO&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-2构造注入"><a href="#4-2构造注入" class="headerlink" title="4.2构造注入"></a>4.2构造注入</h4><p><strong>通过构造方法为成员变量赋值</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;customer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.basic.Customer&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>steve<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>构造方法重载</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>=&gt;<br>&lt;bean id=<span class="hljs-string">&quot;customer1&quot;</span> class=<span class="hljs-string">&quot;com.xia.basic.Customer&quot;</span>&gt;<br>    &lt;constructor-arg&gt;<br>        &lt;value&gt;kate&lt;/value&gt;<br>    &lt;/constructor-arg&gt;<br>&lt;/bean&gt;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br>=&gt;<br>&lt;bean id=<span class="hljs-string">&quot;customer&quot;</span> class=<span class="hljs-string">&quot;com.xia.basic.Customer&quot;</span>&gt;<br>    &lt;constructor-arg value=<span class="hljs-string">&quot;steve&quot;</span>/&gt;<br>    &lt;constructor-arg value=<span class="hljs-string">&quot;20&quot;</span>/&gt;<br>&lt;/bean&gt;<br>&lt;!--如果构造参数不同的时候通过参数个数区分 如果参数个数相同通过type区分--&gt;<br>&lt;bean id=<span class="hljs-string">&quot;customer2&quot;</span> class=<span class="hljs-string">&quot;com.xia.basic.Customer&quot;</span>&gt;<br>   &lt;constructor-arg type=<span class="hljs-string">&quot;int&quot;</span>&gt;<br>        &lt;value&gt;<span class="hljs-number">25</span>&lt;/value&gt;<br>    &lt;/constructor-arg&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><p>思考:如果构造器参数个数相同，类型相同那么怎么区分，这种情况不存在，因为不符合方法的重载</p></li></ul><h3 id="5-注入总结"><a href="#5-注入总结" class="headerlink" title="5.注入总结"></a>5.注入总结</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">未来的实战种如何选择?<br>set注入会更加的多<br><span class="hljs-code">1.构造注入麻烦</span><br><span class="hljs-code">2.Spring底层应用了大量的set注入</span><br></code></pre></td></tr></table></figure><h3 id="6-反转控制与依赖注入"><a href="#6-反转控制与依赖注入" class="headerlink" title="6.反转控制与依赖注入"></a>6.反转控制与依赖注入</h3><h4 id="反转控制IOC"><a href="#反转控制IOC" class="headerlink" title="反转控制IOC"></a>反转控制IOC</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">控制:对对象的成员变量赋值的控制权<br>反转控制:对成员变量赋值的控制权由代码中转移到了Spring工厂和配置文件之中<br><span class="hljs-code">好处:解耦合</span><br><span class="hljs-code">底层实现:Spring工厂创建对象 工厂设计模式</span><br></code></pre></td></tr></table></figure><h3 id="依赖注入DI"><a href="#依赖注入DI" class="headerlink" title="依赖注入DI"></a>依赖注入DI</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">类中的方法依赖于另外一个类<br>例如 UserService 依赖于 UserDAO  <br></code></pre></td></tr></table></figure><h2 id="第四章复杂对象"><a href="#第四章复杂对象" class="headerlink" title="第四章复杂对象"></a>第四章复杂对象</h2><h3 id="4-1什么是复杂对象-不能直接通过new创建出来的对象"><a href="#4-1什么是复杂对象-不能直接通过new创建出来的对象" class="headerlink" title="4.1什么是复杂对象:不能直接通过new创建出来的对象"></a>4.1什么是复杂对象:不能直接通过new创建出来的对象</h3><ul><li>SqlSessionFactrory</li><li>Connetction</li></ul><h3 id="4-2Spring工厂创建复杂对象"><a href="#4-2Spring工厂创建复杂对象" class="headerlink" title="4.2Spring工厂创建复杂对象"></a>4.2Spring工厂创建复杂对象</h3><h4 id="4-2-1FactoryBean接口"><a href="#4-2-1FactoryBean接口" class="headerlink" title="4.2.1FactoryBean接口"></a>4.2.1FactoryBean接口</h4><ul><li><p>实现FactoryBean接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Connection&gt; &#123;<br><br>    <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager<br>                .getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/atguidudb&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-keyword">return</span> connection;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> Connection.class;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// true 为单实例</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置复杂对象 简单对象的话返回的是class类的对象而复杂对象则是getObject()方法返回的对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dbconn&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.basic.factorybean.ConnectionFactoryBean&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>细节</p><ul><li><p>如果想获得FactioryBean对象 : ctx.getBean(“&amp;dbconn”);</p></li><li><p>public boolean isSingleton()方法:</p><p>返回true只会创建一个对象（单实例）</p><p>Connection(false) 不能被共用</p><p>SqlSessionFactory(true)线程安全</p></li></ul></li><li><p>按照依赖注入思想修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Connection&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> String driverClassName;<br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDriverClassName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> driverClassName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDriverClassName</span><span class="hljs-params">(String driverClassName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.driverClassName = driverClassName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUrl</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUrl</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-built_in">this</span>.url = url;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class.forName(driverClassName);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager<br>                .getConnection(url, username, password);<br>        <span class="hljs-keyword">return</span> connection;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> Connection.class;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// true 为单实例</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置复杂对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dbconn&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.basic.factorybean.ConnectionFactoryBean&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/atguigudb?serverTimezone=UTC&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>FactoryBean实现简易思想</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.为什么要实现FactoryBean接口？实现getObejct()方法<br>2.ctx.getBean(&quot;conn&quot;)获得的是复杂对象 Connection 而不是 ConnectionFactoryBean<br><span class="hljs-code">1.通过bean标签中的class是不是FactoryBean接口的实现</span><br><span class="hljs-code">是: 复杂对象</span><br><span class="hljs-code">调用getObejct()方法</span><br><span class="hljs-code">否: 简单对象</span><br><span class="hljs-code">直接创建对象</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-2-2实例工厂"><a href="#4-2-2实例工厂" class="headerlink" title="4.2.2实例工厂"></a>4.2.2实例工厂</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">避免Spring框架的侵入<br>整合遗留系统<br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;connFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.basic.factorybean.ConnectionFactory&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/atguigudb?serverTimezone=UTC&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;conn&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;connFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getObject&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-2静态工厂"><a href="#4-2-2静态工厂" class="headerlink" title="4.2.2静态工厂"></a>4.2.2静态工厂</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;staticConn&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.basic.factorybean.StaticConnectionFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getConnection&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>区别:静态工厂不需要对象，所以可以直接配置类</p><h2 id="第五章Spring生命周期"><a href="#第五章Spring生命周期" class="headerlink" title="第五章Spring生命周期"></a>第五章Spring生命周期</h2><h3 id="1-控制对象创建次数"><a href="#1-控制对象创建次数" class="headerlink" title="1.控制对象创建次数"></a>1.控制对象创建次数</h3><h4 id="1-1控制简单对象创建次数"><a href="#1-1控制简单对象创建次数" class="headerlink" title="1.1控制简单对象创建次数"></a>1.1控制简单对象创建次数</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.scope.Account&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.scope.Account&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>/&gt;</span> <br>prototype 每一都会创建新的<br>singleton 只创建一次<br>默认为singleton<br></code></pre></td></tr></table></figure><h4 id="1-2控制复杂对象创建次数"><a href="#1-2控制复杂对象创建次数" class="headerlink" title="1.2控制复杂对象创建次数"></a>1.2控制复杂对象创建次数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-comment">// true 为单实例 false 每一次都会创建新的对象</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">// 如果没有isSingleton方法还是通过 scope属性控制</span><br></code></pre></td></tr></table></figure><h4 id="1-3为什么控制对象创建次数"><a href="#1-3为什么控制对象创建次数" class="headerlink" title="1.3为什么控制对象创建次数"></a>1.3为什么控制对象创建次数</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">节省内存<br><span class="hljs-code">1.可以公用的创建一次就可以</span><br><span class="hljs-code">1.SqlSessionFactory</span><br><span class="hljs-code">2.DAO</span><br><span class="hljs-code">3.Service</span><br><span class="hljs-code">2.不能被公用就需要每次都创建</span><br><span class="hljs-code">1.Connection</span><br><span class="hljs-code">2.sqlSession | Session</span><br></code></pre></td></tr></table></figure><h3 id="2-对象的生命周期"><a href="#2-对象的生命周期" class="headerlink" title="2.对象的生命周期"></a>2.对象的生命周期</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.什么是对象的生命周期<br><span class="hljs-code">一个对象 创建 存活 消亡 的过程</span><br><span class="hljs-code">2.为什么要学习生命周期</span><br><span class="hljs-code">由spring来负责对象的创建 存活 销毁 有利于我们使用Spring为我们创建的对象</span><br></code></pre></td></tr></table></figure><h4 id="2-1生命周期的三个阶段"><a href="#2-1生命周期的三个阶段" class="headerlink" title="2.1生命周期的三个阶段"></a>2.1生命周期的三个阶段</h4><ul><li><p>创建阶段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">scope = &quot;singleton&quot;<br><span class="hljs-code">Spring工厂在创建的创建</span><br><span class="hljs-code">如果想获取的时候再创建 lazy-init = &quot;true&quot;</span><br><span class="hljs-code">scope = &quot;prototype&quot;</span><br><span class="hljs-code">在我们获取对象的同时创建对象</span><br><span class="hljs-code">ctx.getBean()</span><br></code></pre></td></tr></table></figure></li><li><p>初始化阶段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Spring在创建完对象后,调用完初始化方法,完成对应的初始化操作<br>1.初始化方法<br><span class="hljs-code">由程序员提供的,提供初始化方法,由Spring工厂调用</span><br></code></pre></td></tr></table></figure><p>实现InitializingBean接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.InitializingBean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br>    <span class="hljs-comment">// 1.调用构造器创建对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Product</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Product的无参构造器!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 创建完成之后 初始化对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;Product.afterPropertiesSet()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>普通方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>提供普通方法<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myInit</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Product.myInit&quot;</span>);<br>&#125;<br><span class="hljs-number">2.</span>在spring配置文件中注册<br>&lt;bean id=<span class="hljs-string">&quot;product&quot;</span> class=<span class="hljs-string">&quot;com.xia.life.Product&quot;</span> init-method=<span class="hljs-string">&quot;myInit&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>细节分析</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.如果上述方法都有，那么顺序是什么呢?<br><span class="hljs-code">1.Product.afterPropertiesSet()</span><br><span class="hljs-code">2.Product.myInit()</span><br><span class="hljs-code">2.如果对象中有成员变量，那么顺序如何呢?</span><br><span class="hljs-code">注入一定发生在初始化前面</span><br><span class="hljs-code">1.Product.setPrice() set注入~</span><br><span class="hljs-code">2.Product.afterPropertiesSet()</span><br><span class="hljs-code">3.Product.myInit</span><br><span class="hljs-code">3.什么叫做初始化操作</span><br><span class="hljs-code">对于资源的初始化</span><br><span class="hljs-code">数据库</span><br><span class="hljs-code">IO</span><br><span class="hljs-code">网络</span><br></code></pre></td></tr></table></figure></li><li><p>销毁阶段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">什么是销毁<br><span class="hljs-code">spring在销毁对象前，会调用销毁方法，完成销毁操作</span><br><span class="hljs-code">1.什么时候会销毁创建的对象</span><br><span class="hljs-code">spring工厂在关闭的时候</span><br></code></pre></td></tr></table></figure><p>实现DisposableBean接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;Product.destroy()&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>普通方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myDestroy</span><span class="hljs-params">()</span> &#123;<br> System.out.println(<span class="hljs-string">&quot;Product.myDestroy()&quot;</span>);<br>&#125;<br><span class="hljs-comment">//配置文件:destroy-method=&quot;myDestroy&quot;</span><br></code></pre></td></tr></table></figure><p>细节分析</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.销毁方法只适用于scope = &quot;singleton&quot;的对象 重量级对象！<br>2.销毁操作指的是资源的释放<br><span class="hljs-code">io.close()</span><br><span class="hljs-code">connection.close()</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="小配置文件"><a href="#小配置文件" class="headerlink" title="小配置文件"></a>小配置文件</h2><ul><li><p><strong>将Spring配置文件中需要经常修改的信息放到一个更小的文件中</strong></p><h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><ol><li><p>配置db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driverClassName</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/atguigudb?serverTimezone=UTC</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure></li><li><p>整合spring配置文件和小配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:db.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="第六章类型转换器"><a href="#第六章类型转换器" class="headerlink" title="第六章类型转换器"></a>第六章类型转换器</h2><h3 id="1-Spring内置的类型转换器："><a href="#1-Spring内置的类型转换器：" class="headerlink" title="1.Spring内置的类型转换器："></a>1.Spring内置的类型转换器：</h3><p>将配置文件中的String类型的数据，转换成对应的对象中需要的类型，从而完成注入。</p><h3 id="2-自定义类型转换器"><a href="#2-自定义类型转换器" class="headerlink" title="2.自定义类型转换器"></a>2.自定义类型转换器</h3><h4 id="2-1自定义类型转换类"><a href="#2-1自定义类型转换类" class="headerlink" title="2.1自定义类型转换类"></a>2.1自定义类型转换类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDateConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Converter</span>&lt;String, Date&gt; &#123;<br><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">convert</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            date = sdf.parse(s);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2在Spring中注册"><a href="#2-2在Spring中注册" class="headerlink" title="2.2在Spring中注册"></a>2.2在Spring中注册</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDateConverter&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.converter.MyDateConverter&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;conversionService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;converters&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;myDateConverter&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注册的时候 <code>ConversionServiceFactoryBean</code> 定义id的时候必须为：<code>conversionService</code></p><h2 id="第七章后置处理Bean"><a href="#第七章后置处理Bean" class="headerlink" title="第七章后置处理Bean"></a>第七章后置处理Bean</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">BeanPostProcessor:对Spring工厂创建的对象再修改<br><br>AOP底层实现<br></code></pre></td></tr></table></figure><h4 id="BeanpostProcessor开发步骤"><a href="#BeanpostProcessor开发步骤" class="headerlink" title="BeanpostProcessor开发步骤"></a>BeanpostProcessor开发步骤</h4><ol><li><p>类实现BeanPostProcessor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <span class="hljs-comment">// 对象创建完成之后 初始化之前对对象进行加工</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 1.在实战中 很少使用initialing方法所有不需要区分 Before 或者 After</span><br><span class="hljs-comment">    * 2.所以只需要实现一个就可以了</span><br><span class="hljs-comment">    * */</span><br><br>    <span class="hljs-comment">//初始化完成之后 对对象再进行加工</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-keyword">if</span>(bean <span class="hljs-keyword">instanceof</span> Category) &#123;<br>            <span class="hljs-type">Category</span> <span class="hljs-variable">myBean</span> <span class="hljs-operator">=</span> (Category) bean;<br>            myBean.setName(<span class="hljs-string">&quot;xiadong&quot;</span>);<br>            <span class="hljs-keyword">return</span> myBean;<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>spring配置文件中注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;beanPostProcessor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.beanpostprocessor.MyBeanPostProcessor&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring动态代理开发</title>
    <link href="/2022/03/23/springAOP/"/>
    <url>/2022/03/23/springAOP/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章静态代理设计模式"><a href="#第一章静态代理设计模式" class="headerlink" title="第一章静态代理设计模式"></a>第一章静态代理设计模式</h2><h3 id="1-为什么需要代理设计模式"><a href="#1-为什么需要代理设计模式" class="headerlink" title="1.为什么需要代理设计模式"></a>1.为什么需要代理设计模式</h3><h4 id="1-1问题"><a href="#1-1问题" class="headerlink" title="1.1问题"></a>1.1问题</h4><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 在JavaEE分层开发中，哪一层最重要<br><span class="hljs-code">Service</span><br><span class="hljs-code"></span><br><span class="hljs-code">- Service层中包含的代码</span><br><span class="hljs-code">  1. 核心功能</span><br><span class="hljs-code">     1.业务运算</span><br><span class="hljs-code">     2.DAO调用</span><br><span class="hljs-code">  2. 额外功能</span><br><span class="hljs-code">     1.事务</span><br><span class="hljs-code">     2.日志</span><br><span class="hljs-code">     3.性能监控</span><br><span class="hljs-code">- Service层如何加入额外功能</span><br><span class="hljs-code">代理模式</span><br></code></pre></td></tr></table></figure><h3 id="2-代理设计模式"><a href="#2-代理设计模式" class="headerlink" title="2.代理设计模式"></a>2.代理设计模式</h3><h4 id="2-1概念"><a href="#2-1概念" class="headerlink" title="2.1概念"></a>2.1概念</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdowm">通过代理类为原始类增加额外功能<br>可以不修改原始类/目标类 &lt;&lt; 被代理类<br></code></pre></td></tr></table></figure><h4 id="2-3静态代理的实现"><a href="#2-3静态代理的实现" class="headerlink" title="2.3静态代理的实现"></a>2.3静态代理的实现</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">代理类 = 原始类(目标类) + 额外功能 + 实现同一个接口<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 共同的接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span>;<br>&#125;<br><br><span class="hljs-comment">// 原始类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(User user)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserServiceImpl.register()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserServiceImpl.login()&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 代理类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImplProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(User user)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;-----log-----&quot;</span>);<br>        userService.register(user);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;-----log-----&quot;</span>);<br>        <span class="hljs-keyword">return</span> userService.login(user);<br>    &#125;<br>&#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImplProxy</span>();<br>        userService.login(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-4静态代理的问题"><a href="#2-4静态代理的问题" class="headerlink" title="2.4静态代理的问题"></a>2.4静态代理的问题</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.每一个原始类都有一个代理类 代码量翻倍<br>2.额外功能维护性差<br><span class="hljs-code">代理类中 修改额外功能复杂</span><br></code></pre></td></tr></table></figure><h2 id="第二章动态代理开发"><a href="#第二章动态代理开发" class="headerlink" title="第二章动态代理开发"></a>第二章动态代理开发</h2><h3 id="1-动态代理概念"><a href="#1-动态代理概念" class="headerlink" title="1.动态代理概念"></a>1.动态代理概念</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">通过代理类为原始类添加额外功能<br>便于原始类的维护<br></code></pre></td></tr></table></figure><h3 id="2-开发环境"><a href="#2-开发环境" class="headerlink" title="2.开发环境"></a>2.开发环境</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.14.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjrt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-开发步骤"><a href="#3-开发步骤" class="headerlink" title="3.开发步骤"></a>3.开发步骤</h3><ol><li><p>创建原始类&#x2F;目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(User user)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserServiceImpl.register()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserServiceImpl.login()&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>额外功能</p><p><code>MethodBeforeAdvice</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Before</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodBeforeAdvice</span> &#123;<br><br> <span class="hljs-comment">// method 原始类中的原始方法</span><br>    <span class="hljs-comment">// object 原始方法中的参数</span><br>    <span class="hljs-comment">// o 原始对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(Method method, Object[] objects, Object o)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;---Before.log---&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>MethodInterceptor</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Around</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br><br>    <span class="hljs-comment">// methodInvocation  &lt;&lt; 原始方法</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(MethodInvocation methodInvocation)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">// 运行在原始方法之前</span><br>        System.out.println(<span class="hljs-string">&quot;----Around start-----&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> methodInvocation.proceed();<br>        <span class="hljs-comment">// 运行在原始方法之后</span><br>        System.out.println(<span class="hljs-string">&quot;----Around end-----&quot;</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义切入点</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">切入点:额外功能加入的位置<br>目的:程序员自定义给哪个方法加入额外功能<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pc&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* *(..))&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>组装</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">将第二步和第三步整合<br><span class="hljs-code">切入点 + 额外功能</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pc&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">目的:获得Spring工厂创建的动态代理对象<br>注意:<br>1.Spring工厂通过id属性获得的是代理对象<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;/applicationContext2.xml&quot;</span>);<br><span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>userService.login(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br>System.out.println(userService.getClass());<br><span class="hljs-comment">// class com.sun.proxy.$Proxy7</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="4-动态代理细节分析"><a href="#4-动态代理细节分析" class="headerlink" title="4.动态代理细节分析"></a>4.动态代理细节分析</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.Spring创建的代理类在什么地方<br><span class="hljs-code">Spring框架在运行时，通过动态字节码技术，在虚拟机内部，程序结束，动态代理类也会小时</span><br><span class="hljs-code">小心方法区OutOfMemory</span><br><span class="hljs-code">2.动态代理编程简化了代理开发</span><br><span class="hljs-code">切入点 + 额外功能</span><br><span class="hljs-code">类似于搭积木 </span><br><span class="hljs-code">3.便于额外功能的维护</span><br></code></pre></td></tr></table></figure><h2 id="第三章切入点详解"><a href="#第三章切入点详解" class="headerlink" title="第三章切入点详解"></a>第三章切入点详解</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">决定了额外功能的加入位置(方法)<br><span class="hljs-code">&lt;aop:pointcut id=&quot;pc&quot; expression=&quot;execution()&quot;/&gt;</span><br><span class="hljs-code">execution(* *(..)) &gt;&gt; 匹配了所有方法</span><br><span class="hljs-code">execution() 切入函数</span><br><span class="hljs-code">* *(..) 切入点表达式</span><br></code></pre></td></tr></table></figure><h3 id="1-切入点表达式"><a href="#1-切入点表达式" class="headerlink" title="1.切入点表达式"></a>1.切入点表达式</h3><h4 id="1-1方法切入点表达式"><a href="#1-1方法切入点表达式" class="headerlink" title="1.1方法切入点表达式"></a>1.1方法切入点表达式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> <span class="hljs-emphasis">*(..) -&gt; 所有方法</span><br><span class="hljs-emphasis">*</span> 修饰符 返回值<br><span class="hljs-bullet">*</span> 方法名  <br>(..) 参数列表<br><br><span class="hljs-code">    </span><br><span class="hljs-code">1.定义login方法做为切入点</span><br><span class="hljs-code">    * login(..)</span><br><span class="hljs-code">2.定义login方法且有两个字符串类型参数</span><br><span class="hljs-code">    * login(String,String)</span><br><span class="hljs-code">3.register(User user)</span><br><span class="hljs-code">    * register(com.xia.User)</span><br><span class="hljs-code">    自己定义的类需要填入全限定名</span><br><span class="hljs-code">4.login(String,..) </span><br><span class="hljs-code">    除了第一个是String 剩下的都可以</span><br><span class="hljs-code">5.User register(String name,String password)</span><br><span class="hljs-code">com.xia.User register(String,String)</span><br><span class="hljs-code">6.全限定</span><br><span class="hljs-code">* com.xia.service.impl.UserService.login(String,String)</span><br></code></pre></td></tr></table></figure><h4 id="1-2类切入点"><a href="#1-2类切入点" class="headerlink" title="1.2类切入点"></a>1.2类切入点</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.com.xia.service.impl.UserServiceImpl类中的所有方法<br><span class="hljs-bullet">*</span> com.xia.service.impl.UserServiceImpl.<span class="hljs-emphasis">*(..)</span><br><span class="hljs-emphasis">2.不同包中相同类中的所有方法</span><br><span class="hljs-emphasis">2.1类只存在一级包</span><br><span class="hljs-emphasis">*</span> <span class="hljs-emphasis">*.UserServiceImpl.*</span>(..)<br><span class="hljs-code">2.2类存在多级包</span><br><span class="hljs-code">* *..UserServiceImpl.*(..)</span><br></code></pre></td></tr></table></figure><h4 id="1-3包切入点"><a href="#1-3包切入点" class="headerlink" title="1.3包切入点"></a>1.3包切入点</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.切入点包中的所有类只能在impl中而不能在子包中<br><span class="hljs-bullet">*</span> com.xia.service.impl.<span class="hljs-emphasis">*.*</span>(..)<br>2.切入点包中的所有类只能在impl中和子包中<br><span class="hljs-bullet">*</span> com.xia.service.impl..<span class="hljs-emphasis">*.*</span>(..)<br></code></pre></td></tr></table></figure><h3 id="2-切入点函数"><a href="#2-切入点函数" class="headerlink" title="2.切入点函数"></a>2.切入点函数</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.execution()<br><span class="hljs-code">execution(* com.xia.service..*.*(..))</span><br><span class="hljs-code">2.args()</span><br><span class="hljs-code">匹配方法名</span><br><span class="hljs-code">args(String,String)</span><br><span class="hljs-code">execution(* *(String,String))</span><br><span class="hljs-code">3.within</span><br><span class="hljs-code">类，包切入点表达式匹配</span><br><span class="hljs-code">within(com.xia.service..*)</span><br><span class="hljs-code">within(*..UserServiceImpl)</span><br><span class="hljs-code">4.@annotation</span><br><span class="hljs-code">为有特定注解的方法加入额外功能</span><br><span class="hljs-code">&lt;aop:pointcut id=&quot;anno-pc&quot; expression=&quot;@annotation(com.xia.Log)&quot;/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-切入点逻辑运算"><a href="#3-切入点逻辑运算" class="headerlink" title="3.切入点逻辑运算"></a>3.切入点逻辑运算</h3><ol><li><p><code>and</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">login(String name,String password)<br><br>execution(* login(..)) and <span class="hljs-title function_">args</span><span class="hljs-params">(String,String)</span><br>    <br>与操作不能用于同种类型的切入点函数<br></code></pre></td></tr></table></figure></li><li><p><code>or</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* login()) or <span class="hljs-title function_">execution</span><span class="hljs-params">(* register()</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="第四章AOP实现底层原理"><a href="#第四章AOP实现底层原理" class="headerlink" title="第四章AOP实现底层原理"></a>第四章AOP实现底层原理</h2><h3 id="1-AOP概念"><a href="#1-AOP概念" class="headerlink" title="1.AOP概念"></a>1.AOP概念</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">AOP 面向切面编程 == spring动态代理开发<br><span class="hljs-code">以切面基本单位完成程序开发，通过切面之间的彼此协同，完成程序开发</span><br><span class="hljs-code">切面 = 切入点 + 额外功能</span><br><span class="hljs-code">OOP 面向对象编程</span><br><span class="hljs-code">以对象为基本单位完成程序开发，通过对象间的相互协同，完成程序构建</span><br><span class="hljs-code">POP 面向过程编程</span><br><span class="hljs-code">以函数为基本单位完成程序开发，通过函数间的相互调用，完成程序构建</span><br></code></pre></td></tr></table></figure><h3 id="2-切面名词解释"><a href="#2-切面名词解释" class="headerlink" title="2.切面名词解释"></a>2.切面名词解释</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">切面 = 切入点 + 额外功能<br><br>面 = 点 + 相同性质<br><br>需要给多个原始类加入相同的额外功能 那么就相当于是一个切面<br></code></pre></td></tr></table></figure><h3 id="3-AOP的底层实现原理"><a href="#3-AOP的底层实现原理" class="headerlink" title="3.AOP的底层实现原理"></a>3.AOP的底层实现原理</h3><h4 id="3-1核心问题"><a href="#3-1核心问题" class="headerlink" title="3.1核心问题"></a>3.1核心问题</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.AOP如何创建动态代理类<br><span class="hljs-code">动态字节码技术 </span><br><span class="hljs-code">2.通过原始对象的id值获得的是代理类的对象</span><br></code></pre></td></tr></table></figure><h4 id="3-2JDKProxy动态代理类创建"><a href="#3-2JDKProxy动态代理类创建" class="headerlink" title="3.2JDKProxy动态代理类创建"></a>3.2JDKProxy动态代理类创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xia.jdk;<br><br><span class="hljs-keyword">import</span> com.xia.basic.User;<br><span class="hljs-keyword">import</span> com.xia.proxy.UserService;<br><span class="hljs-keyword">import</span> com.xia.proxy.UserServiceImpl;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJDKProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.创建原始对象</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>        <span class="hljs-comment">// 2.创建动态代理</span><br><br>        <span class="hljs-comment">// InvocationHandler 实现额外功能</span><br>        <span class="hljs-comment">// 用于添加额外功能和之前的MethodInterceptor类似</span><br>        <span class="hljs-comment">// 其实就是对Invocation实现了封装</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-comment">// proxy 原始对象 method原始方法 args 方法参数</span><br>                System.out.println(<span class="hljs-string">&quot;------JDKProxyBefore-----&quot;</span>);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> method.invoke(userService,args);<br>                System.out.println(<span class="hljs-string">&quot;------JDKProxyAfter-----&quot;</span>);<br>                <span class="hljs-keyword">return</span> ret;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userServiceProxy</span> <span class="hljs-operator">=</span> (UserService) Proxy.newProxyInstance(<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                * 类加载器功能</span><br><span class="hljs-comment">                * 1.把对应类的字节码文件加载入jvm内存中</span><br><span class="hljs-comment">                * 2.创建这个类的类对象 Class</span><br><span class="hljs-comment">                * 3.借一个类加载器</span><br><span class="hljs-comment">                * */</span><br>                TestJDKProxy.class.getClassLoader(),<br>                <span class="hljs-comment">// 获得原始对象的所有的接口 这样就可以创建和原始类实现相同接口的代理类</span><br>                userService.getClass().getInterfaces(),<br>                <span class="hljs-comment">// 额外功能</span><br>                handler);<br>        userServiceProxy.login(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br><br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3Cglib动态代理"><a href="#3-3Cglib动态代理" class="headerlink" title="3.3Cglib动态代理"></a>3.3Cglib动态代理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCjLib</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建原始对象</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>        <span class="hljs-comment">// cglib创建代理对象</span><br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        enhancer.setClassLoader(TestCjLib.class.getClassLoader());<br>        enhancer.setSuperclass(UserService.class);<br>        enhancer.setCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodInterceptor</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                System.out.println(<span class="hljs-string">&quot;cglib--before&quot;</span>);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> method.invoke(userService, <span class="hljs-string">&quot;夏冬&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;cglib--after&quot;</span>);<br>                <span class="hljs-keyword">return</span> ret;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userServiceProxy</span> <span class="hljs-operator">=</span> (UserService)enhancer.create();<br>        userServiceProxy.login(<span class="hljs-string">&quot;xiadong&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4总结"><a href="#3-4总结" class="headerlink" title="3.4总结"></a>3.4总结</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">jdk动态代理:通过接口创建代理类<br>cjlib动态代理:通过父类创建代理类<br></code></pre></td></tr></table></figure><h4 id="3-5Spring工厂如何加工原始对象"><a href="#3-5Spring工厂如何加工原始对象" class="headerlink" title="3.5Spring工厂如何加工原始对象"></a>3.5Spring工厂如何加工原始对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyBeanPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        enhancer.setSuperclass(bean.getClass());<br>        enhancer.setClassLoader(ProxyBeanPostProcessor.class.getClassLoader());<br>        enhancer.setCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodInterceptor</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                System.out.println(<span class="hljs-string">&quot;beanPostProcessor--before&quot;</span>);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> method.invoke(bean, objects);<br>                System.out.println(<span class="hljs-string">&quot;beanPostProcessor--after&quot;</span>);<br>                <span class="hljs-keyword">return</span> invoke;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> enhancer.create();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第五章-基于注解的AOP开发步骤"><a href="#第五章-基于注解的AOP开发步骤" class="headerlink" title="第五章 基于注解的AOP开发步骤"></a>第五章 基于注解的AOP开发步骤</h2><h3 id="1-开发步骤"><a href="#1-开发步骤" class="headerlink" title="1.开发步骤"></a>1.开发步骤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 代表是一个切面类</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br><br>    <span class="hljs-comment">// 等同于 MethodInterceptor.invoke()</span><br>    <span class="hljs-meta">@Around(&quot;execution(* getAllBlog(..))&quot;)</span><span class="hljs-comment">// 切入点</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;Aspect -- before&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> joinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;Aspect -- after&quot;</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blogService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.aspect.BlogServiceImpl&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">切面:</span><br><span class="hljs-comment">    1.体现了额外功能</span><br><span class="hljs-comment">    2.体现了切入点</span><br><span class="hljs-comment">    3.体现了组装</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;around&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xia.aspect.MyAspect&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--基于注解进行AOP编程--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-细节"><a href="#2-细节" class="headerlink" title="2.细节"></a>2.细节</h3><h4 id="2-1切入点表达式复用"><a href="#2-1切入点表达式复用" class="headerlink" title="2.1切入点表达式复用"></a>2.1切入点表达式复用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 代表是一个切面类</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br>    <br>    <span class="hljs-comment">// 切入点表达提取到这个函数上</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* getAllBlog(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myPointCut</span><span class="hljs-params">()</span> &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-comment">// 等同于 MethodInterceptor.invoke()</span><br>    <span class="hljs-meta">@Around(value = &quot;myPointCut()&quot;)</span><span class="hljs-comment">// 切入点</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;Aspect -- before&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> joinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;Aspect -- after&quot;</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-2动态代理类创建方式"><a href="#2-2动态代理类创建方式" class="headerlink" title="2.2动态代理类创建方式"></a>2.2动态代理类创建方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.jdk<br><span class="hljs-code">基于接口</span><br><span class="hljs-code">2.cjlib</span><br><span class="hljs-code">基于父类</span><br><span class="hljs-code">默认使用jdk创建动态代理类</span><br><span class="hljs-code">&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;</span><br><span class="hljs-code">true:cjlib false:jdk</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring</tag>
      
      <tag>动态代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring基础引言</title>
    <link href="/2022/03/23/spring%E5%9F%BA%E7%A1%80%E5%BC%95%E8%A8%80/"/>
    <url>/2022/03/23/spring%E5%9F%BA%E7%A1%80%E5%BC%95%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章-引言"><a href="#第一章-引言" class="headerlink" title="第一章 引言"></a>第一章 引言</h2><h3 id="1-EJB存在的问题"><a href="#1-EJB存在的问题" class="headerlink" title="1.EJB存在的问题"></a>1.EJB存在的问题</h3><ol><li>运行环境苛刻</li><li>可以移植性差</li><li>重量级框架</li></ol><h3 id="2-什么是Spring"><a href="#2-什么是Spring" class="headerlink" title="2.什么是Spring"></a>2.什么是Spring</h3><p>Spring是一个轻量级JavaEE解决方案，整合了多种设计模式</p><ul><li><p>轻量级</p><p>1.对运行环境要求低，可以运行在web容器中 <code>tomcat</code> <code>resion</code> <code>jetty</code></p><p>2.代码移植性好，不需要实现额外的接口</p></li><li><p>整合了设计模式</p><p>1.工厂</p><p>2.代理</p><p>3.模板</p><p>4.策略</p></li></ul><h3 id="3-工厂设计模式"><a href="#3-工厂设计模式" class="headerlink" title="3.工厂设计模式"></a>3.工厂设计模式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown">1.概念:通过工厂类创建对象<br><span class="hljs-code">User user = new User();</span><br><span class="hljs-code">2.目的:解耦合</span><br><span class="hljs-code">耦合:代码间的强关联关系</span><br><span class="hljs-code">问题:不利于代码维护</span><br><span class="hljs-code">把接口的实现类硬编码在了程序中</span><br><span class="hljs-code">UserService userService = new UserServiceImpl();</span><br><span class="hljs-code">=&gt;</span><br><span class="hljs-code">UserService userservice = new UserServiceImplNew();</span><br><span class="hljs-code">如果要改变UserService的实现类就需要修改代码,那么就需要重新编译</span><br></code></pre></td></tr></table></figure><h4 id="简单工厂设计"><a href="#简单工厂设计" class="headerlink" title="简单工厂设计"></a>简单工厂设计</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xia.basic;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputStream = BeanFactory.class.getResourceAsStream(<span class="hljs-string">&quot;/applicationContext.properties&quot;</span>);<br>            properties.load(inputStream);<br>            inputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserService <span class="hljs-title function_">getUserService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">userServiceImpl</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;userService&quot;</span>);<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(userServiceImpl);<br>            userService = (UserService)clazz.newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> userService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserDAO <span class="hljs-title function_">getUserDAO</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">UserDAO</span> <span class="hljs-variable">userDAO</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(properties.getProperty(<span class="hljs-string">&quot;userDAO&quot;</span>));<br>             userDAO = (UserDAO)clazz.newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> userDAO;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="通用工厂设计"><a href="#通用工厂设计" class="headerlink" title="通用工厂设计"></a>通用工厂设计</h4><p>显然简单工厂中每一个实现类都需要一个方法，那么有没有什么办法可以只设计一个通用方法呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xia.basic;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputStream = BeanFactory.class.getResourceAsStream(<span class="hljs-string">&quot;/applicationContext.properties&quot;</span>);<br>            properties.load(inputStream);<br>            inputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 通用工厂方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String beanName)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(properties.getProperty(beanName));<br>            object = clazz.newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>Spring本质上就是一个工厂，可以用来创建对象，解耦合</p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
